/* Recursive Binary Search for sorted arrays */
#include <stdio.h>

int binarySearch(int arr[], int l, int r, int x){
  if(r >= 1){                    // If the index of the last element is greater than or equal to 1
    int mid = l + (r-1)/2;       // Initializing the middle index of the array
    if(arr[mid] == x)            // If the current element value equals the value of x
      return mid;                // Return the index of the element
    if(arr[mid] > x)             // If the current element value is greater than the value of x
      return binarySearch(arr, l, mid-1, x); // Change the index r
    return binarySearch(arr, mid+1, r, x);    // Change the index l
   }
   return -1;                   // Element not found in array
  }
  
  int main(){
    int arr[100];               // Declaration of the array
    int x;                      // Declaration of x, the value to search for in the array
    scanf("%d",&x);             // Scanning the value x
    int N;                      // Declaration of the size of the array
    scanf("%d",&N);             // Scanning the size of the array
    for(int i = 0; i < N; ++i){
      scanf("%d", &arr[i]);     // Scanning the array
    }
    int result = binarySearch(arr, 0, N-1, x);
    (result == -1)? printf("Element not found\n") : printf("Element found at index %d\n", result);
      // If the result returned from the binarySearch function is -1, the value x is not found in the array
      // Otherwise the element is found and the index is printed.
     return 0;
  }
  
